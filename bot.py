#!/usr/bin/python
# -*- coding: utf-8 -*-
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import apiai, json
import telebot
import constant
import requests
from bs4 import BeautifulSoup

bot = telebot.TeleBot('token') # –¢–æ–∫–µ–Ω API –∫ Telegram
# dispatcher = updater.dispatcher
@bot.message_handler(commands=['start'])
def start_message(message):
    user_markup = telebot.types.ReplyKeyboardMarkup(True, True  )
    user_markup.row('–∫–æ—Ä–æ–Ω–∞')
    user_markup.row('–∑–¥–æ—Ä–æ–≤—å–µ', '—Å–º–µ—Ä—Ç—å')
    user_markup.row('–ø—Ä–∏–≤–µ—Ç', '–ø–æ–∫–∞')

    bot.send_message(message.from_user.id, 'You are welcome!', reply_markup=user_markup)

# @bot.message_handler(commands=['stop'])
# def start_message(message):
#     directory = 'google.com'
#     # hide_makrup = telebot.types.
#     bot.send_message(message.from_user.id, '..', reply_markup=hide_markup)


def ret_info():
    url = "https://www.worldometers.info/coronavirus/"
    page = requests.get(url).text
    soup = BeautifulSoup(page, 'html.parser')
    ans = []

    for d in soup.find_all('div', class_='maincounter-number'):
        ans.append(d.span.text)
    return f'–ó–∞–±–æ–ª–µ–ª–æ –≤ –º–∏—Ä–µ - {ans[0]}'
    #return soup.find(f'–ó–∞–±–æ–ª–µ–ª–æ –≤ –º–∏—Ä–µ''div', {'class' : 'maincounter-number'}).text


def farm_data():
    url = "https://www.worldometers.info/coronavirus/"
    page = requests.get(url).text
    soup = BeautifulSoup(page, 'lxml')
    ans = []

    for d in soup.find_all('div', class_='maincounter-number'):
        ans.append(d.span.text)

    return (f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ—Ä—Ç–µ–π –≤ –º–∏—Ä–µ - {ans[1]}\n')
    #return soup.find('div', {'class' : 'content-inner'}, 'div', {'id' : 'maincounter-wrap'}, 'div', {'class' : 'maincounter-number'}).text

def re—Å_info():
    url = "https://www.worldometers.info/coronavirus/"
    page = requests.get(url).text
    soup = BeautifulSoup(page, 'lxml')
    ans = []

    for d in soup.find_all('div', class_='maincounter-number'):
        ans.append(d.span.text)

    return (f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö –≤ –º–∏—Ä–µ- {ans[2]}\n')

@bot.message_handler(content_types=['text'])
def send_text(message):
    if message.text.lower() == '—Å–º–µ—Ä—Ç—å':
        bot.send_message(message.chat.id, farm_data())
    if message.text.lower() == '–∫–æ—Ä–æ–Ω–∞':
        bot.send_message(message.chat.id, ret_info())
    if message.text.lower() == '–∑–¥–æ—Ä–æ–≤—å–µ':
        bot.send_message(message.chat.id, re—Å_info())
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —á–µ–≥–æ –∏–∑–≤–æ–ª–∏—Ç–µ?üëãüèª')
    elif message.text.lower() == '–ø–æ–∫–∞':
        bot.send_message(message.chat.id, '–ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∞–π—Å—è –¥–æ–º–∞üò∑')

bot.polling(none_stop=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
# def startCommand(bot, update):
#     bot.send_message(chat_id=update.message.chat_id, text='–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –ø–æ–æ–±—â–∞–µ–º—Å—è?')

# –•–µ–Ω–¥–ª–µ—Ä—ã
# start_command_handler = CommandHandler('start', startCommand)
# text_message_handler = MessageHandler(Filters.text, textMessage)
# # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
# dispatcher.add_handler(start_command_handler)
# dispatcher.add_handler(text_message_handler)
# # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
# updater.start_polling(clean=True)
# # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –±—ã–ª–∏ –Ω–∞–∂–∞—Ç—ã Ctrl + C
# updater.idle()